'''
#도로건설
5
6 5
0 1 0 0 0 0
1 0 0 0 0 0
0 1 0 1 0 0
0 0 0 0 0 0
0 0 0 0 0 1
7 7
1 0 1 0 1 0 0
1 0 0 1 0 0 1
0 0 0 0 0 1 1
1 1 1 0 0 1 1
0 0 0 1 1 0 1
1 0 1 1 0 1 0
0 0 1 0 0 0 0
6 8
0 0 0 0 0 0
0 1 0 1 1 1
0 0 1 0 1 0
0 0 0 1 0 1
0 0 0 0 1 0
0 0 0 0 0 1
0 0 0 0 0 0
0 0 0 0 0 0
10 10
0 0 0 0 1 1 1 0 0 0
1 1 0 0 0 1 1 0 1 1
1 0 1 0 1 1 1 1 0 0
1 0 1 0 0 0 1 0 0 1
0 1 0 1 1 0 0 0 0 1
1 1 1 1 0 0 0 0 0 1
0 0 1 1 0 0 1 0 0 1
1 1 0 1 0 1 1 1 0 1
1 0 0 0 1 0 0 1 1 1
0 1 1 0 0 1 1 1 0 0
45 50
1 0 1 1 1 0 1 0 0 1 0 1 0 0 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 0 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1
1 1 0 1 0 0 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 1 1 0 1 1 0 0 1 0 1 0 1 1 1 0 1 1 1
0 1 1 1 0 1 1 1 1 1 0 1 1 0 1 1 0 1 0 1 1 0 1 1 0 1 1 1 0 1 0 0 1 1 1 1 0 1 0 1 0 0 1 1 0
0 1 1 1 1 1 1 0 1 0 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 1 0 1 0 0 1 1 1 1 1 1 1
1 1 1 0 0 1 1 0 0 1 1 1 0 1 1 1 1 0 1 0 0 0 1 1 1 0 1 1 0 1 1 1 1 1 0 1 0 1 1 0 1 1 1 0 1
0 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 0 1 0 1 1 1 0 1 1 1 1 0 0 1 1 1 1
1 1 1 1 0 1 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 0 0 0 0 1 1 0 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0 0
0 1 1 1 1 0 1 0 1 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 0 1 0 0 1 1 1 0 1 1
0 0 1 1 0 1 1 1 1 0 1 0 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 0 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 0
0 0 1 0 0 0 1 0 1 1 1 0 1 1 1 0 0 0 1 1 1 1 1 1 1 0 1 1 1 0 0 1 0 1 1 1 1 1 0 1 1 0 0 1 1
0 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 0 1 0 1
1 1 1 0 1 1 1 1 0 1 0 1 0 1 1 1 1 0 1 1 1 0 0 1 0 0 0 0 1 1 0 1 1 1 1 1 1 1 0 0 1 1 1 0 0
0 1 1 1 1 0 1 1 0 1 1 0 1 0 0 1 1 1 0 1 1 1 1 1 1 0 0 1 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1
0 1 1 1 0 0 0 1 1 1 1 1 1 1 0 1 1 0 0 0 1 1 1 1 0 1 1 0 0 1 0 1 0 0 0 1 1 1 0 1 1 1 0 0 1
1 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 1 0 0 0 1 0 1 1 1 0 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1
0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 0 0 1 1 0 1 1 0 1
0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 1 1 1 1 0 1 1 0 0 1 0 1 1 1 1 1 0 0 1 0 1 1 1 0
0 1 0 1 1 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 1 1 1 1 1 1 1 0 1 1 0 1 1 1 0 1 0 1 0 1 0 1 1 0
1 1 0 1 1 0 1 1 1 1 1 0 1 1 1 0 0 1 1 1 0 0 0 0 1 1 0 1 0 1 0 0 0 1 1 1 0 0 1 1 1 0 1 1 1
1 0 1 0 1 0 0 1 1 1 1 1 0 0 0 0 0 1 1 0 1 1 0 1 0 0 1 0 1 0 0 1 0 0 1 1 1 0 1 1 1 1 1 1 1
1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 0 0 1 1 0 0 1 1 0 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1
1 1 1 1 0 0 1 0 0 1 1 1 0 1 0 1 1 1 0 0 1 1 0 0 1 0 1 1 0 1 1 1 1 0 1 0 1 1 1 0 1 1 1 0 1
0 0 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 0 0 1 0 1 1 1 1 1 0 1 1 0 1 0 0 0 1 1 1 1 1 0 1 1 0 1
0 0 1 1 0 1 1 0 1 0 1 1 0 1 0 1 1 0 0 0 1 0 1 1 0 1 0 0 1 1 1 1 0 0 0 0 1 0 1 1 0 0 0 1 0
1 1 1 1 0 0 0 0 1 0 0 1 0 0 0 1 0 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 1 1 1 1
1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 0 1 0 1 1 1 1 1 1 0 0 1 1 1 0 1 1 1 1 1 1 0 0 1 0
1 0 1 1 1 1 1 1 1 1 0 1 1 1 0 0 0 1 1 1 0 0 1 0 1 0 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0
1 0 0 1 1 1 1 1 0 0 0 0 0 0 0 1 0 1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0
1 1 1 1 1 0 0 1 1 1 0 0 1 0 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 0 1 1 0 1 0 0 1 1 0 1 1 1 1 0 1
0 1 1 0 1 0 0 0 1 1 0 1 0 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 1
1 0 1 1 0 1 1 1 1 0 1 0 1 1 1 1 0 1 1 0 1 1 1 0 0 0 0 1 0 0 1 0 1 0 1 1 1 1 1 0 1 1 0 0 1
1 1 1 1 0 1 1 0 0 1 1 0 0 1 1 1 1 1 0 1 1 0 1 1 1 0 0 0 1 0 1 0 1 1 0 1 1 1 1 1 0 1 0 1 1
1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 0 1 1 1 0 1
1 1 1 1 1 1 1 1 0 1 0 0 0 0 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 0 0 0 1 0 0 1 1 1 1 1 0 1 1
0 1 1 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 1 1 0 0 1 1 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1
1 1 0 1 1 1 0 0 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 1 0 1 1 1 0 1
0 1 1 1 1 0 1 0 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 0 0 1 1 0 1 0 1 1 0 1 1 0 1
1 1 0 1 0 1 1 0 1 0 0 1 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 0 1 1
0 1 0 0 1 0 1 1 0 0 1 1 0 0 1 1 1 1 1 1 1 0 1 1 1 1 0 0 0 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1
1 1 1 1 1 1 0 1 1 0 1 1 1 0 0 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 1 0 1 1 1 0 1
1 1 1 0 1 0 0 0 0 0 1 0 1 0 0 1 0 1 1 0 0 1 1 1 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 0 0 0 1 1 1
1 0 0 1 1 0 0 0 1 1 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1
1 1 1 1 1 0 1 1 0 1 1 1 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 1 1 0 0 1
0 1 0 0 0 1 1 1 0 0 0 1 1 1 1 0 1 1 1 0 1 0 1 1 0 1 1 1 1 0 1 1 0 1 0 1 1 0 1 1 0 1 0 1 0
1 0 1 0 0 0 1 1 1 0 1 1 0 1 1 1 0 1 0 1 1 1 0 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1
1 1 0 1 1 1 1 0 1 0 1 0 0 1 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 0
1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 0 0 1
0 1 1 0 0 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 0 1 0 1 0 1 0 0 1 0 1 0 0 1 1 1 0 1 0 0 1 1 1 0 1
1 0 1 1 1 1 1 1 1 0 0 0 0 0 0 1 0 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 0 0 1 1 0 0 1 1 0 1 1
0 1 0 1 1 1 1 1 1 1 0 0 0 0 0 0 1 0 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 0 0 1 1 0 0 1 1 0 1
'''
def horizon():
    for i in range(H):
        if sum(MAP[i]) == 0:
            roads.append([[i, k] for k in range(W)])
    return

def vertical():
    for i in range(len(MAP)):
        ans = 0
        for j in range(H):
            ans += MAP[j][i]
            if ans > 0:
                break
        if ans == 0:
            roads.append([[k, i] for k in range(H)])
    return

def distance(r, c, x, y):
    dist = abs(r-x)+abs(c-y)
    return dist


T = int(input())
for tc in range(1, T+1):
    W, H = map(int, input().split())    #가로 길이, 세로 길이
    MAP = [list(map(int, input().split())) for _ in range(H)]

    houses = []
    for i in range(H):
        for j in range(W):
            if MAP[i][j] == 1:
                houses.append([i,j])

    roads = []
    horizon()
    vertical()

    minDist = 9999
    for road in roads:
        for j in road:
            x = j[0]
            y = j[1]
            for i in houses:
                r = i[0]
                c = i[1]
                dist = distance(x, y, r, c)
                minDist = min(minDist, dist)
    print('#{} {}'.format(tc, minDist))
